@using GatherUp.Models.ViewModels
@model EventViewModel

@{
    ViewData["Title"] = "Szczegóły";
}

<h1>Szczegóły wydarzenia</h1>
<hr />
<div class="event-details">
    <div style="gap: 32px;" class="d-flex h-100">
        <div class="event-details__image-container">
            <img class="event-details__image" src="~/internal-images/@Model.Image" />
        </div>
        <div class="d-flex flex-column w-100">
            <div style="gap: 50%;" class="d-flex align-items-center">
                <h3>@Model.Name</h3>
                <p class="text-muted m-0">Organizator: @Model.UserName</p>
            </div>
            <p class="text-muted"><strong>Adres:</strong> @Model.Location</p>
            <span class="lead d-block mb-1">@Html.DisplayNameFor(Model => Model.Description):</span>
            <div class="overflow-auto h-75 event-details__description">
                <p>@Model.Description</p>
            </div>
            <div class="py-3 d-flex justify-content-between w-100">
                <div style="gap: 8px;" class="d-flex">
                @await Component.InvokeAsync("FollowButton", new { eventModel = Model })
                @await Component.InvokeAsync("JoinRequestButton", new { eventModel = Model })
                </div>
                @{
                    if ((bool)Model.IsUserEvent)
                    {
                        <div style="gap: 8px;" class="d-flex">
                            <a asp-action="Edit" asp-route-id="@Model?.Id" class="btn btn-outline-light">Edytuj</a> 
                            <a asp-action="Delete" asp-route-id="@Model?.Id" class="btn btn-outline-danger">Usuń</a>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
 @await Component.InvokeAsync("GoBackButton", new { url = @Url.Action("Index"), buttonText = "Wróć do przeglądu wydarzeń"})
</div>


